"""
Given an array of numbers nums, in which exactly two elements appear only once and all the other elements appear exactly twice. 
Find the two elements that appear only once.
Example:
Input:  [1,2,1,3,2,5]
Output: [3,5]
Note:
The order of the result is not important. So in the above example, [5, 3] is also correct.
Your algorithm should run in linear runtime complexity. Could you implement it using only constant space complexity?
"""

"""
Say the two unique numbers are a, b.
If we use the XOR technique in Single Number I, we will get a^b.
a^b will tell us at which bits the two numbers differ, and we know there will be at least one difference (else they will be the same number).
For example, 3^5=110, meaning at the 1st and 2nd bits, one of them is 0, the other is 1, whereas at the last bit, they are the same (both 0 or 1). 
We just need to figure out which number has what bit.

Now consider all the other numbers, we know that each number has a duplicate, meaning at each bit, there will be even counts of 1 or 0.
Since we want to figure out which bits a and b each has, we can take the result of a^b, and separate the entire array based on where the bits differ.

For example, 3^5=110. We use the 1st bit, and separate the arrays into two groups. 
One group has the 1st bit being 1. The other has the 1st bit being 0. 
Group 1: 
    5 = 101
Group 2:
    1 = 001
    2 = 010
    1 = 001
    3 = 011
    2 = 010
Or if we use the 2nd bit, where one group has the 2nd bit being 1, the other has the 2nd bit being 0. 
Group 1: 
    2 = 010
    3 = 011
    2 = 010
Group 2:
    1 = 001
    1 = 001
    5 = 101
Either way, we will end up with 2 groups of odd count of numbers. 
Because all the other numbers appear twice, there are even count of them in each group. 
And because a and b won't be in the same group, they will become the single number of their group.
Now we just need to use the XOR technique again to find them from each group.

O(n) time to go through each number twice.
O(1) space.
"""

class Solution:
    def singleNumber(self, nums: List[int]) -> List[int]:
        abXor = 0
        for num in nums:
            abXor ^= num
        
        diff = abXor & -abXor
        aXor, bXor = 0, 0
        for num in nums:
            if num & diff:
                aXor ^= num
            else:
                bXor ^= num
        return [aXor, bXor]
