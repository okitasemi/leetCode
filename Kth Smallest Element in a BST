"""
Given a binary search tree, write a function kthSmallest to find the kth smallest element in it.
Note: You may assume k is always valid, 1 ≤ k ≤ BST's total elements.

Example 1:
Input: root = [3,1,4,null,2], k = 1
   3
  / \
 1   4
  \
   2
Output: 1

Example 2:
Input: root = [5,3,6,2,4,null,null,1], k = 3
       5
      / \
     3   6
    / \
   2   4
  /
 1
Output: 3

Follow up:
What if the BST is modified (insert/delete operations) often and you need to find the kth smallest frequently? How would you optimize the kthSmallest routine?
"""

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None


class Solution:
    """
An inorder traversal will put the nodes into a sorted list.
Then we just access the kth element.
O(n) time, O(n) space.
"""
    def kthSmallestRec(self, root: TreeNode, k: int) -> int:
        def traverse(node):
            if node:
                traverse(node.left)
                nodeList.append(node.val)
                traverse(node.right)
        nodeList = []
        traverse(root)
        return nodeList[k-1]
    
    """
    Observe that the smallest is the left most node.
    The 2nd smallest would be:
    1. The left most node's right child's left most child, if it exists. Or,
    2. The left most node's parent.
    With this in mind, we can use a stack.
    Get all the left branch nodes first, then pop them off as we decrement k.
    As we pop them, we check if each of them has a right child.
    If there is, we append all the left children of the right child.
    Then repeat the popping until k is 0.
    O(n) time, O(n) space.
    """
    def kthSmallestStack(self, root, k):
        stack = []
        node = root
        while k > 0:
            while node:
                stack.append(node)
                node = node.left
            k -= 1
            popped = stack.pop()
            if popped.right:
                node = popped.right
        return popped.val
            
    """
    Follow up:
    If we do insert/delete often, and call kthSmallest often.
    Each insert/delete will be O(logn) on average, and each kthSmallest is O(n).
    To improve, we can use a structure that includes a BST, and a doubly linked list with sorted nodes. Each node in the BST would point to corresponding node in the linked list.
    That way, insert/delete into the tree is still O(logn), and insert into the linked list is O(1).
    Looking for the kth smallest element in the linked list is O(k).
    We just need extra O(n) space to for the linked list.
    """ 
