"""
https://leetcode.com/problems/trapping-rain-water/
https://techdevguide.withgoogle.com/paths/advanced/volume-of-water/#!

Given n non-negative integers representing an elevation map where the width of each bar is 1, 
compute how much water it is able to trap after raining.

The above elevation map is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. 
In this case, 6 units of rain water (blue section) are being trapped. Thanks Marcos for contributing this image!

Example:
Input: [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
"""

class Solution:
    def trap(self, height: List[int]) -> int:
        totalArea = 0
        stack = [0]
        for i in range(1, len(height)):
            while stack and height[i] >= height[stack[-1]]:
                poppedH = height[stack.pop()]
                if stack:
                    prevI = stack[-1]
                    prevH = height[prevI]
                    area = (min(prevH, height[i]) - poppedH) * (i - prevI - 1)
                    totalArea += area
            stack.append(i)
        return totalArea
        

"""
Put indices into a stack. The stack keep track of heights in decreasing order.
While newHeight is greater than stack[-1], pop stack[-1].
With every pop, area = (min(newHeight, height at stack[-1]) - poppedHeight) * index diff
    
Runtime: 52 ms, faster than 66.47% of Python3 online submissions for Trapping Rain Water.
Memory Usage: 13.1 MB, less than 100.00% of Python3 online submissions for Trapping Rain Water.
"""
