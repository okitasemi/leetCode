# Given an integer array nums, find the contiguous subarray (containing at least one number) 
# which has the largest sum and return its sum.
# Example:
# Input: [-2,1,-3,4,-1,2,1,-5,4],
# Output: 6
# Explanation: [4,-1,2,1] has the largest sum = 6.
# Follow up:
# If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, 
# which is more subtle.

class Solution(object):
    # Faster than 35%, less than 20%
    def maxSubArrayPrefixSum(self, nums):
        if len(nums) < 2:
            return nums[0]
        prefixArr = []
        currentSum = 0
        for num in nums:
            currentSum += num
            prefixArr.append(currentSum)
            
        maxVal = self.findMax(nums)
        maxPrefix = self.findMax(prefixArr)
        
        i, j = 0, 1
        maxDiff = prefixArr[0]
        while i < len(nums) and j < len(nums):
            if prefixArr[i] <=  prefixArr[j]:
                diff = prefixArr[j] - prefixArr[i]
                maxDiff = max(maxDiff, diff)
                j += 1
            else:
                i = j
                j += 1
        
        return max(maxVal, maxPrefix, maxDiff)
        
    def findMax(self, arr):
        maxVal = arr[0]
        for item in arr:
            maxVal = max(maxVal, item)
        return maxVal
    
    # Faster than 75%, less than 90%
    def maxSubArrayOld(self, nums):
        currentMax = self.findMax(nums)
        currentSum = nums[0]
        i = 1
        while i < len(nums):
            if currentSum < 0:
                currentSum = nums[i]
            else:            
                currentSum += nums[i]
                if currentSum > currentMax:
                    currentMax = currentSum
            i += 1
        return currentMax

    # Runtime: 64 ms, faster than 83.45% of Python3 online submissions for Maximum Subarray.
    # Memory Usage: 13.4 MB, less than 95.93% of Python3 online submissions for Maximum Subarray.
    """
    If we iterate through the array, at every number, the maximum sum so far would be one of the following:
    1. the previous sum without this number; or
    2. the previous sum with this number; or
    3. this number.
    Notice that case 1 is redundant, because it would have been considered when we look at the previous number.
    So we just have 2 cases: add new number to the previous sum, or discard the previous sum and start over with new number.
    We can evaluate the sum for both cases, and choose the larger one.
    Notice in case 3, we discard the previous sum, but we don't know if this sum happens to be the overall max.
    So every time we update the current sum, we also update the overall max with the current sum. 
    """
    def maxSubArray(self, nums: List[int]) -> int:
        maxSum, currentSum = float('-inf'), float('-inf')
        for num in nums:
            currentSum = max(currentSum + num, num)
            maxSum = max(maxSum, currentSum)
        return maxSum
