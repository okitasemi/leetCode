# Given an integer array nums, find the contiguous subarray (containing at least one number) 
# which has the largest sum and return its sum.
# Example:
# Input: [-2,1,-3,4,-1,2,1,-5,4],
# Output: 6
# Explanation: [4,-1,2,1] has the largest sum = 6.
# Follow up:
# If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, 
# which is more subtle.

class Solution(object):
    # Faster than 35%, less than 20%
    def maxSubArrayPrefixSum(self, nums):
        if len(nums) < 2:
            return nums[0]
        prefixArr = []
        currentSum = 0
        for num in nums:
            currentSum += num
            prefixArr.append(currentSum)
            
        maxVal = self.findMax(nums)
        maxPrefix = self.findMax(prefixArr)
        
        i, j = 0, 1
        maxDiff = prefixArr[0]
        while i < len(nums) and j < len(nums):
            if prefixArr[i] <=  prefixArr[j]:
                diff = prefixArr[j] - prefixArr[i]
                maxDiff = max(maxDiff, diff)
                j += 1
            else:
                i = j
                j += 1
        
        return max(maxVal, maxPrefix, maxDiff)
        
    def findMax(self, arr):
        maxVal = arr[0]
        for item in arr:
            maxVal = max(maxVal, item)
        return maxVal
    
    # Faster than 75%, less than 90%
    def maxSubArray(self, nums):
        currentMax = self.findMax(nums)
        currentSum = nums[0]
        i = 1
        while i < len(nums):
            if currentSum < 0:
                currentSum = nums[i]
            else:            
                currentSum += nums[i]
                if currentSum > currentMax:
                    currentMax = currentSum
            i += 1
        return currentMax
