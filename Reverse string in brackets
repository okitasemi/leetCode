"""
You are given a string s that consists of lower case English letters and brackets. 
Reverse the strings in each pair of matching parentheses, starting from the innermost one.
Your result should not contain any brackets.
Example 1:
Input: s = "(abcd)"
Output: "dcba"
Example 4:
Input: s = "a(bcdefghijkl(mno)p)q"
Output: "apmnolkjihgfedcbq"

Constraints:
0 <= s.length <= 2000
s only contains lower case English characters and parentheses.
It's guaranteed that all parentheses are balanced.
"""

class Solution:
    def reverseParentheses(self, s: str) -> str:
        stack = []
        for c in s:
            if c == ")":
                popped = []
                while stack[-1] != "(":
                    popped.append(stack.pop())
                stack.pop()
                stack += popped
            else:
                stack.append(c)
        return "".join(stack)
        
"""
O(n^2) time. O(n) space.
Runtime: 36 ms, faster than 13.97% of Python3 online submissions for Reverse Substrings Between Each Pair of Parentheses.
Memory Usage: 12.6 MB, less than 100.00% of Python3 online submissions for Reverse Substrings Between Each Pair of Parentheses.
"""
