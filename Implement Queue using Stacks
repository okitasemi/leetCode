# Implement the following operations of a queue using stacks.

# push(x) -- Push element x to the back of queue.
# pop() -- Removes the element from in front of queue.
# peek() -- Get the front element.
# empty() -- Return whether the queue is empty.

# You must use only standard operations of a stack -- which means only push to top, peek/pop from top, size, and is empty operations are valid.
# Depending on your language, stack may not be supported natively. You may simulate a stack by using a list or deque (double-ended queue), as long as you use only standard operations of a stack.
# You may assume that all operations are valid (for example, no pop or peek operations will be called on an empty queue).

class MyQueue(object):

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.enqueueArr = []
        self.dequeueArr = []

    def push(self, x):
        """
        Push element x to the back of queue.
        :type x: int
        :rtype: None
        """
        while self.dequeueArr:
            self.enqueueArr.append(self.dequeueArr.pop())
        self.enqueueArr.append(x)         

    def pop(self):
        """
        Removes the element from in front of queue and returns that element.
        :rtype: int
        """
        while self.enqueueArr:
            self.dequeueArr.append(self.enqueueArr.pop())
        return self.dequeueArr.pop()

    def peek(self):
        """
        Get the front element.
        :rtype: int
        """
        while self.enqueueArr:
            self.dequeueArr.append(self.enqueueArr.pop())
        return self.dequeueArr[-1]

    def empty(self):
        """
        Returns whether the queue is empty.
        :rtype: bool
        """
        return len(self.enqueueArr) == 0 and len(self.dequeueArr) == 0
        
# Runtime: 16 ms, faster than 78.53% of Python online submissions for Implement Queue using Stacks.
# Memory Usage: 11.7 MB, less than 65.40% of Python online submissions for Implement Queue using Stacks.
