# Your are given an array of integers prices, for which the i-th element is the price of a given stock on day i; 
# and a non-negative integer fee representing a transaction fee.
# You may complete as many transactions as you like, but you need to pay the transaction fee for each transaction. 
# You may not buy more than 1 share of a stock at a time (ie. you must sell the stock share before you buy again.)
# Return the maximum profit you can make.

---------------------------
Ver 1:
---------------------------

class Solution(object):
    def maxProfit(self, prices, fee):
        """
        :type prices: List[int]
        :type fee: int
        :rtype: int
        """
        profit = 0
        if not prices:
            return profit
        localMin = prices[0]
        localMax = 0
        
        for p in prices[1:]:
            # keep updating localMax until we find it
            if p >= localMax:
                localMax = p
            else:
                # check if we should sell then buy again, or hold on
                if p + fee < localMax:
                    newProfit = localMax - localMin - fee
                    profit = max(profit, profit + newProfit)
                    localMin = p
                    localMax = 0
                    
            if p <= localMin:
                localMin = p
                
        newProfit = localMax - localMin - fee
        profit = max(profit, profit + newProfit)
        return profit
                
                
---------------------------
Ver 2: Same logic but less if/else
---------------------------

class Solution(object):
    def maxProfit(self, prices, fee):
        """
        :type prices: List[int]
        :type fee: int
        :rtype: int
        """
        profit = 0
        if not prices:
            return profit
        localMin = prices[0]
        localMax = 0
        
        for p in prices[1:]:
            # sell current stock if the next buy price is small enough to justify the fee
            # otherwise, hold on to it
            # after sale, reset localMin and localMax
            # if no sale, continue to update localMin and localMax
            if p + fee < localMax:
                newProfit = localMax - localMin - fee
                profit = max(profit, profit + newProfit)
                localMin = p
                localMax = 0
            else:
                localMin = min(localMin, p)
                localMax = max(localMax, p)
            print(p, localMin, localMax)
        # sell the remaining stock in case it wasn't sold
        newProfit = localMax - localMin - fee
        profit = max(profit, profit + newProfit)
        return profit
                
                
# Runtime: 632 ms, faster than 82.75% of Python online submissions for Best Time to Buy and Sell Stock with Transaction Fee.
# Memory Usage: 17.7 MB, less than 100.00% of Python online submissions for Best Time to Buy and Sell Stock with Transaction Fee.
                
