"""
Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.
Your algorithm's runtime complexity must be in the order of O(log n).
If the target is not found in the array, return [-1, -1].

Example 1:
Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:
Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]

Using binary search.
Once we find a match, we look to its left for the starting element, 
Then from that index, look to its right for the ending element.
O(logn) time. O(1) space.
"""

class Solution:
    def searchRange(self, nums: List[int], target: int) -> List[int]:                
        def findIndex(i, j, isStarting):
            while i <= j:
                k = i + int((j - i) /2)
                if nums[k] < target:
                    i = k + 1
                elif nums[k] > target:
                    j = k - 1
                else:
                    if isStarting:
                        result[0] = k
                        j = k - 1
                    else:
                        result[1] = k
                        i = k + 1
                
        result = [-1, -1]
        findIndex(0, len(nums) - 1, True)
        if result[0] == -1:
            return result
        findIndex(result[0], len(nums) - 1, False)
        return result
