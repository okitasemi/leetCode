# Given an integer array, find three numbers whose product is maximum and output the maximum product.
# Note: The length of the given array will be in range [3,104] and all elements are in the range [-1000, 1000].
# Multiplication of any three numbers in the input won't exceed the range of 32-bit signed integer.


---------------------------
Ver 1: Sort the array first. 
Pros: Short code
Cons: Time complexity O(nlogn)
---------------------------

class Solution(object):
    def maximumProduct(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        
        nums.sort()
        return max(nums[0] * nums[1] * nums[-1], nums[-1] * nums[-2] * nums[-3])


---------------------------
Ver 2: Find the smallest, second smallest, largest, second largest, and third largest elements in one pass.
Pros: longer code
Cons: Time complexity O(n)
---------------------------

class Solution(object):
    def maximumProduct(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """

        smallest, secondSmallest = 1000, 1000
        largest, secondLargest, thirdLargest = -1000, -1000, -1000

        for num in nums:
            if num <= smallest:
                secondSmallest = smallest
                smallest = num
            elif num < secondSmallest:
                secondSmallest = num

            if num >= largest:
                thirdLargest = secondLargest
                secondLargest = largest
                largest = num
            elif num >= secondLargest:
                thirdLargest = secondLargest
                secondLargest = num
            elif num > thirdLargest:
                thirdLargest = num
        
        return max(smallest * secondSmallest * largest, largest * secondLargest * thirdLargest)
    
# Runtime: 228 ms, faster than 95.81% of Python online submissions for Maximum Product of Three Numbers.
# Memory Usage: 12.5 MB, less than 55.56% of Python online submissions for Maximum Product of Three Numbers.
                
                
            
            
        
