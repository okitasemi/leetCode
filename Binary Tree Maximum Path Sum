"""
Given a non-empty binary tree, find the maximum path sum.
A path is defined as any sequence of nodes from a starting node to any node in the tree along the parent-child connections. 
The path must contain at least one node and does not need to go through the root.

Example 1:
Input: [1,2,3]
       1
      / \
     2   3
Output: 6

Example 2:
Input: [-10,9,20,null,null,15,7]
   -10
   / \
  9  20
    /  \
   15   7
Output: 42
"""

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

"""
At any node, the current max is one of the following:
1. node by itself
2. node + max path starting from node.left
3. node + max path starting from node.right
4. node + max path starting from node.left + max path starting from node.right
In case 1-3, the path can extend upwards. The sum can be considered by its parent node.
In case 4, the path ends at that node. Tthe sum cannot be considered by its parent node. We can only update self.maxSum with it.

O(n) time since we visit each node once.
O(logn) space since the call stack is linear to the height of the tree.
Runtime: 76 ms, faster than 98.31% of Python3 online submissions for Binary Tree Maximum Path Sum.
Memory Usage: 20.1 MB, less than 100.00% of Python3 online submissions for Binary Tree Maximum Path Sum.
"""

class Solution:            
    def maxPathSum(self, root):
        
        def updateMax(node, maxSum): 
            left, right = 0, 0
            if node.left:
                left = updateMax(node.left, node.left.val)
            if node.right:
                right = updateMax(node.right, node.right.val)
            maxSum = max(node.val, node.val + left, node.val + right)
            self.maxSum = max(self.maxSum, maxSum, node.val + left + right)
            return maxSum
        
        self.maxSum = root.val
        updateMax(root, root.val)
        return self.maxSum
