# Given a binary tree, determine if it is height-balanced.
# For this problem, a height-balanced binary tree is defined as:
# a binary tree in which the depth of the two subtrees of every node never differ by more than 1.


# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def isBalanced(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        if not root:
            return True
        height, result = self.traverse(root)
        return result
        
    def traverse(self, node):
        heightL, heightR = 0, 0
        resultL, resultR = True, True
        if node.left:
            heightL, resultL = self.traverse(node.left)
        if node.right:
            heightR, resultR = self.traverse(node.right)
            
        if not resultL or not resultR:
            return 0, False
        if abs(heightL - heightR) > 1:
            return 0, False
        return max(heightL, heightR) + 1, True
                

# Runtime: 36 ms, faster than 89.77% of Python online submissions for Balanced Binary Tree.
# Memory Usage: 16.4 MB, less than 84.38% of Python online submissions for Balanced Binary Tree.
