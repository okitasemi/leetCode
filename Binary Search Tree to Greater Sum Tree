"""
Given the root of a binary search tree with distinct values, 
modify it so that every node has a new value equal to the sum of the values of the original tree 
that are greater than or equal to node.val.

As a reminder, a binary search tree is a tree that satisfies these constraints:
The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
 
Example 1:
Input: [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]
Output: [30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]
 
Note:
The number of nodes in the tree is between 1 and 100. Each node will have value between 0 and 100.
The given tree is a binary search tree.
"""

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    """
    Visit the right branch first. 
    Use a global variable to keep track of  accumulative total.
    Since we visit the nodes in the order of right child->node->left child, we know that we are adding the numbers in descending order.
    Everytime you visit a node, add the accumulative total to itself. 
    Then update the accumulative total.
    O(n) time to go through each node. O(logn) space for the call stack.
    """
    def bstToGstGlobal(self, root: TreeNode) -> TreeNode:
        def traverse(node):
            if node:
                traverse(node.right)
                node.val += self.total
                self.total = node.val
                traverse(node.left)
        self.total = 0
        traverse(root)
        return root
    
    """
    Without using a global variable.
    Pass the sub of the subtree from right child to parent then to left child.
    Need to make sure the recursive function returns the sum of the subtree.
    O(n) time to go through each node. O(logn) space for the call stack.
    """
    def bstToGst(self, root):
        def traverse(node, total):
            if node:
                total = traverse(node.right, total)
                node.val += total
                total = traverse(node.left, node.val)
            return total
        traverse(root, 0)
        return root
