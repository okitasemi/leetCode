"""
In an alien language, surprisingly they also use english lowercase letters, but possibly in a different order. 
The order of the alphabet is some permutation of lowercase letters.
Given a sequence of words written in the alien language, and the order of the alphabet, 
return true if and only if the given words are sorted lexicographicaly in this alien language.

Example 1:
Input: words = ["hello","leetcode"], order = "hlabcdefgijkmnopqrstuvwxyz"
Output: true
Explanation: As 'h' comes before 'l' in this language, then the sequence is sorted.
Example 2:
Input: words = ["word","world","row"], order = "worldabcefghijkmnpqstuvxyz"
Output: false
Explanation: As 'd' comes after 'l' in this language, then words[0] > words[1], hence the sequence is unsorted.
Example 3:
Input: words = ["apple","app"], order = "abcdefghijklmnopqrstuvwxyz"
Output: false
Explanation: The first three characters "app" match, and the second string is shorter (in size.) 
According to lexicographical rules "apple" > "app", because 'l' > '∅', 
where '∅' is defined as the blank character which is less than any other character (More info).

Constraints:
1 <= words.length <= 100
1 <= words[i].length <= 20
order.length == 26
All characters in words[i] and order are English lowercase letters.
"""


class Solution:
    """
    Runtime: 28 ms, faster than 94.12% of Python3 online submissions for Verifying an Alien Dictionary.
    Memory Usage: 12.8 MB, less than 100.00% of Python3 online submissions for Verifying an Alien Dictionary.
    
    O(words * word length) time.
    O(1) space.
    Basically, exam two words at a time.
    Compare the first characters, if they are different, check if they are in order.
    If they are the same, compare the second characters, until end of either word.
    """
    
    def isAlienSorted(self, words: List[str], order: str) -> bool:
        dictionary = {char: i for i, char in enumerate(order)}
        
        for i in range(len(words) - 1):
            j = 0
            while j < min(len(words[i]), len(words[i+1])):
                if dictionary[words[i][j]] > dictionary[words[i+1][j]]:
                    return False
                elif dictionary[words[i][j]] == dictionary[words[i+1][j]]:
                    j += 1
                    # A special condition if second word is shorter than first
                    if j == len(words[i+1]) and j < len(words[i]):
                        return False
                else:
                    break
        return True
