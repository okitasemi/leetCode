"""
Given a set of candidate numbers (candidates) (without duplicates) and a target number (target), 
find all unique combinations in candidates where the candidate numbers sums to target.
The same repeated number may be chosen from candidates unlimited number of times.
Note:
All numbers (including target) will be positive integers. The solution set must not contain duplicate combinations.

Example 1:
Input: candidates = [2,3,6,7], target = 7,
A solution set is:
[ [7], [2,2,3] ]
Example 2:
Input: candidates = [2,3,5], target = 8,
A solution set is:
[ [2,2,2,2], [2,3,3], [3,5] ]
"""

class Solution:
    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:
        
        def getComb(nums, total, comb):
            if total == 0:
                result.append(comb)
            for i, num in enumerate(nums):
                if num <= total:
                    getComb(nums[i:], total - num, comb + [num])
                    
        result = []
        getComb(candidates, target, [])  
        return result
        
        
"""
Recursively find the next number until they make up to the target sum. 
O(number of combinations) time.
O(target number) space because the call stack will be as tall as the length of each combination, assuming the smallest num is 1.

Runtime: 52 ms, faster than 84.88% of Python3 online submissions for Combination Sum.
Memory Usage: 12.7 MB, less than 100.00% of Python3 online submissions for Combination Sum.
"""
