# You are given two non-empty linked lists representing two non-negative integers. 
# The digits are stored in reverse order and each of their nodes contain a single digit. 
# Add the two numbers and return it as a linked list.
# You may assume the two numbers do not contain any leading zero, except the number 0 itself.
# Example:
# Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
# Output: 7 -> 0 -> 8
# Explanation: 342 + 465 = 807.



# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

-------------------------------
Ver 1: Get total first, then convert to a linked list 
Time: O(n)
Space: O(n)
-------------------------------

class Solution(object):
    def addTwoNumbers(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        
        power, value = 0, 0
        while l1 or l2:
            value1 = l1.val if l1 else 0
            value2 = l2.val if l2 else 0
            value += (value1 + value2) * pow(10, power)
            power += 1
            l1 = l1.next if l1 else None
            l2 = l2.next if l2 else None
        
        resultList = ListNode(0)
        currentNode = resultList
        digit = value % 10
        currentNode.val = digit
        while value / 10 >= 1:
            currentNode.next = ListNode(0)
            currentNode = currentNode.next
            value = (value - digit) / 10
            digit = value % 10
            currentNode.val = digit
                
        return resultList
    
# Runtime: 60 ms, faster than 41.30% of Python online submissions for Add Two Numbers.
# Memory Usage: 11.7 MB, less than 88.97% of Python online submissions for Add Two Numbers.



-------------------------------
Ver 2: Add nodes to the linked list as we scan the two lists
Time: O(n)
Space: O(n)
-------------------------------

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def addTwoNumbers(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        
        resultList = ListNode(0)
        currentNode = resultList
        carry = 0
        while l1 or l2 or carry:
            value1 = l1.val if l1 else 0
            value2 = l2.val if l2 else 0
            currentNode.val += value1 + value2 + carry
            if currentNode.val >= 10:
                carry = 1
                currentNode.val -= 10
            else: 
                carry = 0
            
            l1 = l1.next if l1 else None
            l2 = l2.next if l2 else None
            if l1 or l2 or carry:
                currentNode.next = ListNode(0)
                currentNode = currentNode.next
            
        return resultList
    

# Runtime: 48 ms, faster than 93.05% of Python online submissions for Add Two Numbers.
# Memory Usage: 11.8 MB, less than 69.12% of Python online submissions for Add Two Numbers.
