"""
Leetcode 253. Meeting Rooms II
Given an array of meeting time intervals consisting of start and end times [[s1,e1],[s2,e2],...] (si < ei), 
find the minimum number of conference rooms required.

Example1
Input: intervals = [(0,30),(5,10),(15,20)], Output: 2
Explanation: We need two meeting rooms
room1: (0,30)
room2: (5,10),(15,20)

Example2
Input: intervals = [(2,7)], Output: 1
Explanation: Only need one meeting room
"""

"""
Your submission beats 92.80% Submissions!
O(nlogn) time because of sort.
O(n) space to keep track of end time.

If we sort the input, we can guarantee that a later meeting does not start before an earlier meeting.
If we use a heap to keep track of the ending time, we can find out if we can use the same room as the meeting that ends first.
If we can use the same room, then we discard that meeting (old meeting is done, and that room is used for a new meeting now).
If even the meeting with the earliest ending time overlaps with the new meeting, then we have to use a new room.
At the end we just count how many entries there are in the end time heap.
"""

"""
Definition of Interval.
class Interval(object):
    def __init__(self, start, end):
        self.start = start
        self.end = end
"""

import heapq
class Solution:
    """
    @param intervals: an array of meeting time intervals
    @return: the minimum number of conference rooms required
    """
    def minMeetingRooms(self, intervals):
        
        intervals.sort(key=lambda x:x.start)
        endTime = [intervals[0].end]
        heapq.heapify(endTime)
        
        for i in range(1, len(intervals)):
            if endTime and endTime[0] <= intervals[i].start:
                heapq.heappop(endTime)
            heapq.heappush(endTime, intervals[i].end)
        
        return len(endTime)
