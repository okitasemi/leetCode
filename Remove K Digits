"""
Given a non-negative integer represented as a string, remove k digits from the number so the new number is the smallest possible.
Note: The length of num is less than 10002 and will be â‰¥ k. The given num does not contain any leading zero.

Example 1:
Input: num = "1432219", k = 3. Output: "1219"
Explanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.

Example 2:
Input: num = "10200", k = 1. Output: "200"
Explanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.

Example 3:
Input: num = "10", k = 2. Output: "0"
Explanation: Remove all the digits from the number and it is left with nothing which is 0.
"""

class Solution:
    def removeKdigits(self, num: str, k: int) -> str:
        stack = [num[0]]
        for digit in num[1:]:
            while stack and digit < stack[-1] and k > 0:
                stack.pop()
                k -= 1
            stack.append(digit)
            
        while k > 0:
            stack.pop()
            k -= 1
            
        if not stack:
            return "0"
        return str(int("".join(stack)))
        
"""
O(n) time where n = number of digits
Runtime: 40 ms, faster than 56.13% of Python3 online submissions for Remove K Digits.
Memory Usage: 12.9 MB, less than 100.00% of Python3 online submissions for Remove K Digits.
"""
