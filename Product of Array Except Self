"""
Given an array nums of n integers (n > 1), return an array output such that output[i] = product of all the elements except nums[i].

Example:
Input:  [1,2,3,4]
Output: [24,12,8,6]

Note: Please solve it without division and in O(n).

Follow up: Could you solve it with constant space complexity? 
(The output array does not count as extra space for the purpose of space complexity analysis.)
"""

class Solution:
    
    """
    Using Division. O(n) time, O(1) space. However division might be expensive?
    """
    def productExceptSelfDiv(self, nums: List[int]) -> List[int]:
        result = []
        if nums[0] == 0:
            zeroCount = 1
            overallProduct = 1
        else:
            zeroCount = 0
            overallProduct = nums[0]
        
        for num in nums[1:]:
            if num == 0:
                zeroCount += 1
                if zeroCount > 1:
                    result = [0 for i in range(len(nums))]
                    return result
            else:
                overallProduct *= num
                
        if zeroCount == 0:
            for num in nums:
                result.append(int(overallProduct / num))
        else:
            for num in nums:
                if num == 0:
                    result.append(overallProduct)
                else:
                    result.append(0)
        return result
    
    """
    For each index, find the product of all nums to its left, and to its right.
    O(n) time, O(n) space.
    """
    def productExceptSelfLR(self, nums: List[int]) -> List[int]:
        leftP, rightP, result = [1] * len(nums), [1] * len(nums), [1] * len(nums)
        for i in range(1, len(nums)):
            leftP[i] = leftP[i - 1] * nums[i - 1]
        for i in range(len(nums) - 2, -1, -1):
            rightP[i] = rightP[i + 1] * nums[i + 1]
        for i in range(len(nums)):
            result[i] = leftP[i] * rightP[i]
        return result
    
    """
    Use the left product array as the result array. Iterate from the right side and keep track of the running right product. O(n) time, O(1) space.
    """
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        result = [1] * len(nums)
        for i in range(1, len(nums)):
            result[i] = result[i - 1] * nums[i - 1]
        rightP = 1
        for i in range(len(nums) - 1, -1, -1):
            result[i] = result[i] * rightP
            rightP = rightP * nums[i]
        return result
            
        
            
            
