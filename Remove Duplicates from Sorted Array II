# Given a sorted array nums, remove the duplicates in-place such that duplicates appeared at most twice and return the new length.
# Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.
# Example 1: Given nums = [1,1,1,2,2,3],
# Your function should return length = 5, with the first five elements of nums being 1, 1, 2, 2 and 3 respectively.
# It doesn't matter what you leave beyond the returned length.


class Solution(object):
    def removeDuplicates(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        
        if len(nums) < 3:
            return len(nums)
            
        i, j = 0, 1
        alreadyHasTwo = False  #To keep track whether a number has already appeared twice
       
        while j < len(nums):
            if alreadyHasTwo:
                if nums[i] != nums[j]:
                    alreadyHasTwo = False
                    nums[i + 1] = nums[j]
                    i += 1
            else:
                if nums[i] == nums[j]:
                    alreadyHasTwo = True
                else:
                    alreadyHasTwo = False
                nums[i + 1] = nums[j]
                i += 1
            j += 1
        return i + 1
                    
